// Code generated by MockGen. DO NOT EDIT.
// Source: indexer.go

// Package blue_green_kafka is a generated GoMock package.
package blue_green_kafka

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOffsetsIndexer is a mock of offsetsIndexer interface.
type MockOffsetsIndexer struct {
	ctrl     *gomock.Controller
	recorder *MockOffsetsIndexerMockRecorder
}

// MockOffsetsIndexerMockRecorder is the mock recorder for MockOffsetsIndexer.
type MockOffsetsIndexerMockRecorder struct {
	mock *MockOffsetsIndexer
}

// NewMockOffsetsIndexer creates a new mock instance.
func NewMockOffsetsIndexer(ctrl *gomock.Controller) *MockOffsetsIndexer {
	mock := &MockOffsetsIndexer{ctrl: ctrl}
	mock.recorder = &MockOffsetsIndexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOffsetsIndexer) EXPECT() *MockOffsetsIndexerMockRecorder {
	return m.recorder
}

// bg1VersionsExist mocks base method.
func (m *MockOffsetsIndexer) bg1VersionsExist() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "bg1VersionsExist")
	ret0, _ := ret[0].(bool)
	return ret0
}

// bg1VersionsExist indicates an expected call of bg1VersionsExist.
func (mr *MockOffsetsIndexerMockRecorder) bg1VersionsExist() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "bg1VersionsExist", reflect.TypeOf((*MockOffsetsIndexer)(nil).bg1VersionsExist))
}

// bg1VersionsMigrated mocks base method.
func (m *MockOffsetsIndexer) bg1VersionsMigrated() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "bg1VersionsMigrated")
	ret0, _ := ret[0].(bool)
	return ret0
}

// bg1VersionsMigrated indicates an expected call of bg1VersionsMigrated.
func (mr *MockOffsetsIndexerMockRecorder) bg1VersionsMigrated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "bg1VersionsMigrated", reflect.TypeOf((*MockOffsetsIndexer)(nil).bg1VersionsMigrated))
}

// createMigrationDoneFromBg1MarkerGroup mocks base method.
func (m *MockOffsetsIndexer) createMigrationDoneFromBg1MarkerGroup(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createMigrationDoneFromBg1MarkerGroup", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// createMigrationDoneFromBg1MarkerGroup indicates an expected call of createMigrationDoneFromBg1MarkerGroup.
func (mr *MockOffsetsIndexerMockRecorder) createMigrationDoneFromBg1MarkerGroup(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createMigrationDoneFromBg1MarkerGroup", reflect.TypeOf((*MockOffsetsIndexer)(nil).createMigrationDoneFromBg1MarkerGroup), ctx)
}

// exists mocks base method.
func (m *MockOffsetsIndexer) exists(search GroupId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "exists", search)
	ret0, _ := ret[0].(bool)
	return ret0
}

// exists indicates an expected call of exists.
func (mr *MockOffsetsIndexerMockRecorder) exists(search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "exists", reflect.TypeOf((*MockOffsetsIndexer)(nil).exists), search)
}

// findPreviousStateOffset mocks base method.
func (m *MockOffsetsIndexer) findPreviousStateOffset(ctx context.Context, current GroupId) []groupIdWithOffset {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "findPreviousStateOffset", ctx, current)
	ret0, _ := ret[0].([]groupIdWithOffset)
	return ret0
}

// findPreviousStateOffset indicates an expected call of findPreviousStateOffset.
func (mr *MockOffsetsIndexerMockRecorder) findPreviousStateOffset(ctx, current interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "findPreviousStateOffset", reflect.TypeOf((*MockOffsetsIndexer)(nil).findPreviousStateOffset), ctx, current)
}
