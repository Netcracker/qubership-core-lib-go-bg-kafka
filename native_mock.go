// Code generated by MockGen. DO NOT EDIT.
// Source: native.go

// Package blue_green_kafka is a generated GoMock package.
package blue_green_kafka

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockMessage is a mock of Message interface.
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage.
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance.
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// Headers mocks base method.
func (m *MockMessage) Headers() []Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Headers")
	ret0, _ := ret[0].([]Header)
	return ret0
}

// Headers indicates an expected call of Headers.
func (mr *MockMessageMockRecorder) Headers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Headers", reflect.TypeOf((*MockMessage)(nil).Headers))
}

// HighWaterMark mocks base method.
func (m *MockMessage) HighWaterMark() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HighWaterMark")
	ret0, _ := ret[0].(int64)
	return ret0
}

// HighWaterMark indicates an expected call of HighWaterMark.
func (mr *MockMessageMockRecorder) HighWaterMark() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HighWaterMark", reflect.TypeOf((*MockMessage)(nil).HighWaterMark))
}

// Key mocks base method.
func (m *MockMessage) Key() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockMessageMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockMessage)(nil).Key))
}

// NativeMsg mocks base method.
func (m *MockMessage) NativeMsg() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NativeMsg")
	ret0, _ := ret[0].(any)
	return ret0
}

// NativeMsg indicates an expected call of NativeMsg.
func (mr *MockMessageMockRecorder) NativeMsg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NativeMsg", reflect.TypeOf((*MockMessage)(nil).NativeMsg))
}

// Offset mocks base method.
func (m *MockMessage) Offset() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offset")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Offset indicates an expected call of Offset.
func (mr *MockMessageMockRecorder) Offset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offset", reflect.TypeOf((*MockMessage)(nil).Offset))
}

// Partition mocks base method.
func (m *MockMessage) Partition() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Partition")
	ret0, _ := ret[0].(int)
	return ret0
}

// Partition indicates an expected call of Partition.
func (mr *MockMessageMockRecorder) Partition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Partition", reflect.TypeOf((*MockMessage)(nil).Partition))
}

// Topic mocks base method.
func (m *MockMessage) Topic() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topic")
	ret0, _ := ret[0].(string)
	return ret0
}

// Topic indicates an expected call of Topic.
func (mr *MockMessageMockRecorder) Topic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topic", reflect.TypeOf((*MockMessage)(nil).Topic))
}

// Value mocks base method.
func (m *MockMessage) Value() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockMessageMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockMessage)(nil).Value))
}

// MockConsumer is a mock of Consumer interface.
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer.
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance.
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConsumer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConsumerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConsumer)(nil).Close))
}

// Commit mocks base method.
func (m *MockConsumer) Commit(ctx context.Context, marker *CommitMarker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx, marker)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockConsumerMockRecorder) Commit(ctx, marker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockConsumer)(nil).Commit), ctx, marker)
}

// ReadMessage mocks base method.
func (m *MockConsumer) ReadMessage(arg0 context.Context) (Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage", arg0)
	ret0, _ := ret[0].(Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockConsumerMockRecorder) ReadMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockConsumer)(nil).ReadMessage), arg0)
}

// MockNativeAdminAdapter is a mock of NativeAdminAdapter interface.
type MockNativeAdminAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockNativeAdminAdapterMockRecorder
}

// MockNativeAdminAdapterMockRecorder is the mock recorder for MockNativeAdminAdapter.
type MockNativeAdminAdapterMockRecorder struct {
	mock *MockNativeAdminAdapter
}

// NewMockNativeAdminAdapter creates a new mock instance.
func NewMockNativeAdminAdapter(ctrl *gomock.Controller) *MockNativeAdminAdapter {
	mock := &MockNativeAdminAdapter{ctrl: ctrl}
	mock.recorder = &MockNativeAdminAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNativeAdminAdapter) EXPECT() *MockNativeAdminAdapterMockRecorder {
	return m.recorder
}

// AlterConsumerGroupOffsets mocks base method.
func (m *MockNativeAdminAdapter) AlterConsumerGroupOffsets(ctx context.Context, groupIdPrefix GroupId, proposedOffsets map[TopicPartition]OffsetAndMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterConsumerGroupOffsets", ctx, groupIdPrefix, proposedOffsets)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterConsumerGroupOffsets indicates an expected call of AlterConsumerGroupOffsets.
func (mr *MockNativeAdminAdapterMockRecorder) AlterConsumerGroupOffsets(ctx, groupIdPrefix, proposedOffsets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterConsumerGroupOffsets", reflect.TypeOf((*MockNativeAdminAdapter)(nil).AlterConsumerGroupOffsets), ctx, groupIdPrefix, proposedOffsets)
}

// BeginningOffsets mocks base method.
func (m *MockNativeAdminAdapter) BeginningOffsets(ctx context.Context, topicPartitions []TopicPartition) (map[TopicPartition]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginningOffsets", ctx, topicPartitions)
	ret0, _ := ret[0].(map[TopicPartition]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginningOffsets indicates an expected call of BeginningOffsets.
func (mr *MockNativeAdminAdapterMockRecorder) BeginningOffsets(ctx, topicPartitions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginningOffsets", reflect.TypeOf((*MockNativeAdminAdapter)(nil).BeginningOffsets), ctx, topicPartitions)
}

// EndOffsets mocks base method.
func (m *MockNativeAdminAdapter) EndOffsets(ctx context.Context, topicPartitions []TopicPartition) (map[TopicPartition]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndOffsets", ctx, topicPartitions)
	ret0, _ := ret[0].(map[TopicPartition]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndOffsets indicates an expected call of EndOffsets.
func (mr *MockNativeAdminAdapterMockRecorder) EndOffsets(ctx, topicPartitions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndOffsets", reflect.TypeOf((*MockNativeAdminAdapter)(nil).EndOffsets), ctx, topicPartitions)
}

// ListConsumerGroupOffsets mocks base method.
func (m *MockNativeAdminAdapter) ListConsumerGroupOffsets(ctx context.Context, groupId string) (map[TopicPartition]OffsetAndMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConsumerGroupOffsets", ctx, groupId)
	ret0, _ := ret[0].(map[TopicPartition]OffsetAndMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConsumerGroupOffsets indicates an expected call of ListConsumerGroupOffsets.
func (mr *MockNativeAdminAdapterMockRecorder) ListConsumerGroupOffsets(ctx, groupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConsumerGroupOffsets", reflect.TypeOf((*MockNativeAdminAdapter)(nil).ListConsumerGroupOffsets), ctx, groupId)
}

// ListConsumerGroups mocks base method.
func (m *MockNativeAdminAdapter) ListConsumerGroups(ctx context.Context) ([]ConsumerGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConsumerGroups", ctx)
	ret0, _ := ret[0].([]ConsumerGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConsumerGroups indicates an expected call of ListConsumerGroups.
func (mr *MockNativeAdminAdapterMockRecorder) ListConsumerGroups(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConsumerGroups", reflect.TypeOf((*MockNativeAdminAdapter)(nil).ListConsumerGroups), ctx)
}

// OffsetsForTimes mocks base method.
func (m *MockNativeAdminAdapter) OffsetsForTimes(ctx context.Context, times map[TopicPartition]time.Time) (map[TopicPartition]*OffsetAndTimestamp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OffsetsForTimes", ctx, times)
	ret0, _ := ret[0].(map[TopicPartition]*OffsetAndTimestamp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OffsetsForTimes indicates an expected call of OffsetsForTimes.
func (mr *MockNativeAdminAdapterMockRecorder) OffsetsForTimes(ctx, times interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OffsetsForTimes", reflect.TypeOf((*MockNativeAdminAdapter)(nil).OffsetsForTimes), ctx, times)
}

// PartitionsFor mocks base method.
func (m *MockNativeAdminAdapter) PartitionsFor(ctx context.Context, topics ...string) ([]PartitionInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range topics {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PartitionsFor", varargs...)
	ret0, _ := ret[0].([]PartitionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartitionsFor indicates an expected call of PartitionsFor.
func (mr *MockNativeAdminAdapterMockRecorder) PartitionsFor(ctx interface{}, topics ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, topics...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartitionsFor", reflect.TypeOf((*MockNativeAdminAdapter)(nil).PartitionsFor), varargs...)
}
